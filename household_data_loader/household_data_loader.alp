<?xml version="1.0" encoding="UTF-8"?>
<!--
*************************************************
	         AnyLogic Project File
*************************************************
-->
<AnyLogicWorkspace WorkspaceVersion="1.9" AnyLogicVersion="8.9.2.202410172110" AlpVersion="8.9.2">
<Model>
	<Id>1734080351666</Id>
	<Name><![CDATA[household_data_loader]]></Name>
	<EngineVersion>6</EngineVersion>
	<JavaPackageName><![CDATA[household_data_loader]]></JavaPackageName>
	<ModelTimeUnit><![CDATA[Second]]></ModelTimeUnit>
	
	<Folders>
		
	</Folders>
	<ActiveObjectClasses>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1734080351669</Id>
			<Name><![CDATA[Main]]></Name>
			<Import><![CDATA[import java.sql.Connection;
import java.sql.DatabaseMetaData;
//import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;]]></Import>
			<StartupCode><![CDATA[//J_APIConnection startConnection = new J_APIConnection(neighborhoodCodes);

//f_readHouseholdsDatabase(db_householdData);
//f_readDB(db_households);

f_hashMapApproach();]]></StartupCode>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1734080351675</Id>
				<Name><![CDATA[1734080351675]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T extends Agent]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Generic parameter:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>CONTINUOUS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<NetworkType>USER_DEF</NetworkType>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1734163200000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1734080351672</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1734080351676</CurrentLevel>
			<ConnectionsId>1734080351670</ConnectionsId>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1734081175545</Id>
					<Name><![CDATA[neighborhoodCodes]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>50</X><Y>130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[String[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[{"BU00900013",
"BU00900014",
"BU00900015",
"BU00900016",
}]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="Parameter">
					<Id>1737030538413</Id>
					<Name><![CDATA[p_modeFullNetherlands]]></Name>
					<X>50</X><Y>30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[boolean]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[true]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1737030538411</Id>
							<EditorContolType>CHECK_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1737030630260</Id>
					<Name><![CDATA[p_province]]></Name>
					<X>50</X><Y>50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA["Limburg"]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1737030630258</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="CollectionVariable">
					<Id>1734353507960</Id>
					<Name><![CDATA[c_households]]></Name>
					<X>310</X><Y>130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" AccessType="public" StaticVariable="false">
						<CollectionClass><![CDATA[ArrayList]]></CollectionClass>
						<ElementClass><![CDATA[J_Household]]></ElementClass>
						<ValueElementClass><![CDATA[String]]></ValueElementClass>
					</Properties>

				</Variable>
				<Variable Class="CollectionVariable">
					<Id>1737024853156</Id>
					<Name><![CDATA[c_buurtcodeToHouseholds]]></Name>
					<X>310</X><Y>150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" AccessType="public" StaticVariable="false">
						<CollectionClass><![CDATA[LinkedHashMap]]></CollectionClass>
						<ElementClass><![CDATA[String]]></ElementClass>
						<ValueElementClass><![CDATA[ArrayList<J_Household>]]></ValueElementClass>
					</Properties>

				</Variable>
			</Variables>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1734087915803</Id>
					<Name><![CDATA[f_readDB]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>50</X><Y>170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[myDatabase]]></Name>
						<Type><![CDATA[Database]]></Type>
					</Parameter>
					<Body><![CDATA[myDatabase.connect();
System.out.println("Database connected successfully");

String query = "SELECT * FROM households WHERE gebruiksdoelen = 'woonfunctie'";

ResultSet rs = myDatabase.getResultSet( query );
if (!rs.isBeforeFirst()) {
    System.out.println("No data found for the query");
} else {
	while( rs.next() ) {
		f_createHouseholds(rs);
	}
}


rs.close();
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1734353535923</Id>
					<Name><![CDATA[f_createHouseholds]]></Name>
					<X>310</X><Y>90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[rs]]></Name>
						<Type><![CDATA[ResultSet]]></Type>
					</Parameter>
					<Body><![CDATA[int numid = rs.getInt("numid");
int pid = rs.getInt("pid");
int vid = rs.getInt("vid");
String lid = rs.getString("lid");
String sid = rs.getString("sid");
String postcode = rs.getString("postcode");
String straat = rs.getString("straat");
String woonplaatsnaam = rs.getString("woonplaatsnaam");
int huisnummer = rs.getInt("huisnummer");
String huisletter = rs.getString("huisletter");
String huisnummertoevoeging = rs.getString("huisnummertoevoeging");
int oppervlakte = rs.getInt("oppervlakte");
int woningequivalent = rs.getInt("woningequivalent");
String gebruiksdoelen = rs.getString("gebruiksdoelen");
int pand_bouwjaar = rs.getInt("pand_bouwjaar");
int pc6_gemiddelde_woz_waarde_woning = rs.getInt("pc6_gemiddelde_woz_waarde_woning");
int gemiddelde_gemeente_woz = rs.getInt("gemiddelde_gemeente_woz");
int pc6_eigendomssituatie_perc_koop = rs.getInt("pc6_eigendomssituatie_perc_koop");
int pc6_eigendomssituatie_perc_huur = rs.getInt("pc6_eigendomssituatie_perc_huur");
int pc6_eigendomssituatie_aantal_woningen_corporaties = rs.getInt("pc6_eigendomssituatie_aantal_woningen_corporaties");
String netbeheerder = rs.getString("netbeheerder");
String energieklasse = rs.getString("energieklasse");
String woning_type = rs.getString("woning_type");
String sbicode = rs.getString("sbicode");
int gas_ean_count = rs.getInt("gas_ean_count");
int p6_grondbeslag_m2 = rs.getInt("p6_grondbeslag_m2");
int p6_gasm3_2023 = rs.getInt("p6_gasm3_2023");
int p6_gas_aansluitingen_2023 = rs.getInt("p6_gas_aansluitingen_2023");
int p6_kwh_2023 = rs.getInt("p6_kwh_2023");
int p6_kwh_productie_2023 = rs.getInt("p6_kwh_productie_2023");
String point = rs.getString("point");
String buurtcode = rs.getString("buurtcode");
String buurtnaam = rs.getString("buurtnaam");
String wijkcode = rs.getString("wijkcode");
String wijknaam = rs.getString("wijknaam");
String gemeentecode = rs.getString("gemeentecode");
String gemeentenaam = rs.getString("gemeentenaam");
String provincienaam = rs.getString("provincienaam");
String provinciecode = rs.getString("provinciecode");

J_Household household = new J_Household(
	numid,
	pid,
	vid,
	oppervlakte,
	woningequivalent,
	pand_bouwjaar,
	energieklasse,
	buurtcode
	);
c_households.add(household);

// Add the current household to the list corresponding to the buurtcode
// Check if the buurtcode exists in the map
if (c_buurtcodeToHouseholds.containsKey(buurtcode)) {
    // Add the current household to the list corresponding to the buurtcode
    c_buurtcodeToHouseholds.get(buurtcode).add(household);
} else {
    // Handle the case where the buurtcode doesn't exist
    System.out.println("Buurtcode " + buurtcode + " does not exist in the map.");
    // Optionally, you can create a new list for this buurtcode if you want to add the household anyway:
    c_buurtcodeToHouseholds.put(buurtcode, new ArrayList<>());
    c_buurtcodeToHouseholds.get(buurtcode).add(household);
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1737012341275</Id>
					<Name><![CDATA[f_readHouseholdsDatabase]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>100</X><Y>320</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[myDatabase]]></Name>
						<Type><![CDATA[Database]]></Type>
					</Parameter>
					<Body><![CDATA[myDatabase.connect();
System.out.println("Database households connected successfully");

f_printDatabaseTables(myDatabase);
f_indexTables(myDatabase);
f_checkDataTypes(myDatabase);
//f_joinTables(myDatabase);
//f_joinTablesOptimized(myDatabase);

/*
String query = "SELECT * FROM households WHERE gebruiksdoelen = 'woonfunctie'";

ResultSet rs = myDatabase.getResultSet( query );
if (!rs.isBeforeFirst()) {
    System.out.println("No data found for the query");
} else {
	while( rs.next() ) {
		f_createHouseholds(rs);
	}
}


rs.close();
*/]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1737012606209</Id>
					<Name><![CDATA[f_printDatabaseTables]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>110</X><Y>340</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[myDatabase]]></Name>
						<Type><![CDATA[Database]]></Type>
					</Parameter>
					<Body><![CDATA[try {
    // Get connection
    java.sql.Connection connection = myDatabase.getConnection();

    // Retrieve metadata
    java.sql.DatabaseMetaData metaData = connection.getMetaData();

    // Get the list of tables
    java.sql.ResultSet tables = metaData.getTables(null, null, "%", new String[]{"TABLE"});
    
    System.out.println("Tables in the database:");
    while (tables.next()) {
        String tableName = tables.getString("TABLE_NAME");
        System.out.println(tableName);
    }

    tables.close();
} catch (SQLException e) {
    e.printStackTrace();
} finally {
    myDatabase.disconnect();
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1737013376803</Id>
					<Name><![CDATA[f_joinTables]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>110</X><Y>410</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[myDatabase]]></Name>
						<Type><![CDATA[Database]]></Type>
					</Parameter>
					<Body><![CDATA[myDatabase.connect();
System.out.println("Database connected successfully");
System.out.println("Starting join operation");
try {

	// Get the JDBC connection from AnyLogic's Database object
    java.sql.Connection connection = myDatabase.getConnection();
    
    // Define the query
    String query = 
        "UPDATE households " +
        "SET " +
        "    energieklasse_EL = ( " +
        "        SELECT Energieklasse " +
        "        FROM temp_energy_labels " +
        "        WHERE temp_energy_labels.BAGVerblijfsobjectID = households.vid " +
        "    ), " +
        "    energiegebruik_EL = ( " +
        "        SELECT BerekendeEnergieverbruik " +
        "        FROM temp_energy_labels " +
        "        WHERE temp_energy_labels.BAGVerblijfsobjectID = households.vid " +
        "    ) " +
        "WHERE EXISTS ( " +
        "    SELECT 1 " +
        "    FROM temp_energy_labels " +
        "    WHERE temp_energy_labels.BAGVerblijfsobjectID = households.vid " +
        ");";

 	// Create a statement and execute the query
    java.sql.Statement statement = connection.createStatement();
    int rowsAffected = statement.executeUpdate(query);
    System.out.println(rowsAffected + " rows updated successfully in the households table.");

} catch (Exception e) {
    e.printStackTrace();
} finally {
    myDatabase.disconnect();
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1737016467226</Id>
					<Name><![CDATA[f_joinTablesOptimized]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>110</X><Y>430</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[myDatabase]]></Name>
						<Type><![CDATA[Database]]></Type>
					</Parameter>
					<Body><![CDATA[myDatabase.connect();
System.out.println("Database connected successfully");

try {
    // Get the JDBC connection from AnyLogic's Database object
    java.sql.Connection connection = myDatabase.getConnection();

    // Determine the maximum ROWID in the households table
    java.sql.Statement statement = connection.createStatement();
    java.sql.ResultSet resultSet = statement.executeQuery("SELECT MAX(ROWID) AS maxRowId FROM households;");
    long maxRowId = 0;
    if (resultSet.next()) {
        maxRowId = resultSet.getLong("maxRowId");
    }
    resultSet.close();
    statement.close();

    // Set up batch size and tracking variables
    int batchSize = 1000; // Number of rows to process in each batch
    long lastProcessedRowId = 0; // Track the last processed ROWID
    int totalRowsUpdated = 0;

    while (lastProcessedRowId < maxRowId) {
        // Start timer for the batch
        long batchStartTime = System.currentTimeMillis();
        
        // Define the batched SQLite-compatible query using ROWID
        String query = 
            "UPDATE households " +
            "SET " +
            "    energieklasse_EL = ( " +
            "        SELECT Energieklasse " +
            "        FROM temp_energy_labels " +
            "        WHERE temp_energy_labels.BAGVerblijfsobjectID = households.vid " +
            "    ), " +
            "    energiegebruik_EL = ( " +
            "        SELECT BerekendeEnergieverbruik " +
            "        FROM temp_energy_labels " +
            "        WHERE temp_energy_labels.BAGVerblijfsobjectID = households.vid " +
            "    ) " +
            "WHERE ROWID > " + lastProcessedRowId + " " +
            "AND ROWID <= " + (lastProcessedRowId + batchSize) + " " +
            "AND EXISTS ( " +
            "    SELECT 1 " +
            "    FROM temp_energy_labels " +
            "    WHERE temp_energy_labels.BAGVerblijfsobjectID = households.vid " +
            ");";

        // Execute the batch update
        statement = connection.createStatement();
        int currentBatchRowsUpdated = statement.executeUpdate(query);

        // Track rows updated
        totalRowsUpdated += currentBatchRowsUpdated;

        // Log progress
        long batchEndTime = System.currentTimeMillis();
        long batchDuration = batchEndTime - batchStartTime;
        System.out.println("Processed ROWID range: " + (lastProcessedRowId + 1) + " to " + (lastProcessedRowId + batchSize));
        System.out.println("Batch updated: " + currentBatchRowsUpdated + " rows.");
        System.out.println("Batch took: " + roundToInt(batchDuration/1000) + " seconds.");

        // Advance the lastProcessedRowId to the next batch
        lastProcessedRowId += batchSize;

        // Close the statement
        statement.close();
    }

    // Final verification
    System.out.println("Total rows updated: " + totalRowsUpdated);

} catch (Exception e) {
    e.printStackTrace();
} finally {
    myDatabase.disconnect();
    System.out.println("Database connection closed.");
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1737016765096</Id>
					<Name><![CDATA[f_indexTables]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>110</X><Y>360</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[myDatabase]]></Name>
						<Type><![CDATA[Database]]></Type>
					</Parameter>
					<Body><![CDATA[try {
    java.sql.Connection connection = myDatabase.getConnection();
    java.sql.Statement statement = connection.createStatement();

    // Create index on temp_energy_labels.BAGVerblijfsobjectID
    statement.executeUpdate("CREATE INDEX IF NOT EXISTS idx_temp_energy_labels_bag ON temp_energy_labels (BAGVerblijfsobjectID);");

    // Create index on households.vid
    statement.executeUpdate("CREATE INDEX IF NOT EXISTS idx_households_vid ON households (vid);");

    System.out.println("Indexes created successfully.");

    statement.close();
} catch (Exception e) {
    e.printStackTrace();
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1737020331462</Id>
					<Name><![CDATA[f_checkDataTypes]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>110</X><Y>380</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[myDatabase]]></Name>
						<Type><![CDATA[Database]]></Type>
					</Parameter>
					<Body><![CDATA[try {
    myDatabase.connect();
    java.sql.Connection connection = myDatabase.getConnection();
    java.sql.DatabaseMetaData metaData = connection.getMetaData();

    // Check households table
    System.out.println("Columns in 'households':");
    java.sql.ResultSet columns = metaData.getColumns(null, null, "households", null);
    while (columns.next()) {
        String columnName = columns.getString("COLUMN_NAME");
        String dataType = columns.getString("TYPE_NAME");
        System.out.println(columnName + " -> " + dataType);
    }
    columns.close();

    // Check temp_energy_labels table
    System.out.println("\nColumns in 'temp_energy_labels':");
    columns = metaData.getColumns(null, null, "temp_energy_labels", null);
    while (columns.next()) {
        String columnName = columns.getString("COLUMN_NAME");
        String dataType = columns.getString("TYPE_NAME");
        System.out.println(columnName + " -> " + dataType);
    }
    columns.close();

    myDatabase.disconnect();
} catch (Exception e) {
    e.printStackTrace();
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1737024825122</Id>
					<Name><![CDATA[f_hashMapApproach]]></Name>
					<X>300</X><Y>50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[traceln("Start hashmap approach");
double startTime = System.currentTimeMillis();
int decimals = 2;

// Create neighbrohoods
f_selectNeighborhoods();
double time1 = System.currentTimeMillis();
double duration = roundToDecimal((time1 - startTime) / 1000, decimals);
traceln("Created neighborhoods in " + duration + " seconds");

//Create hashmap
for( GZ_Neighborhood nbh : pop_GZ_Neighborhoods ){
	String buurtcode = nbh.p_neighborhoodCode;
	c_buurtcodeToHouseholds.put(buurtcode, new ArrayList<>());
}
double time2 = System.currentTimeMillis();
duration = roundToDecimal((time2 - time1) / 1000, decimals);
traceln("Created hashmap in " + duration + " seconds");

// Connect to database
Database myDatabase = db_householdData;
myDatabase.connect();
//System.out.println("Database connected successfully");

//Create households
f_generateHouseholdsFromDatabase(myDatabase, p_modeFullNetherlands);
double time3 = System.currentTimeMillis();
duration = roundToDecimal((time3 - time2) / 1000, decimals);
traceln("Created households in " + duration + " seconds");

//Link households to neighborhoods
f_linkNeighborhoodsToHouseholds();
double time4 = System.currentTimeMillis();
duration = roundToDecimal((time4 - time3) / 1000, decimals);
traceln("Linked households and neighborhoods in " + duration + " seconds");

//Check total time
duration = roundToDecimal((time4 - startTime) / 1000, decimals);
traceln("Total start-up time: " + duration + " seconds");

]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1737024963054</Id>
					<Name><![CDATA[f_generateHouseholdsFromDatabase]]></Name>
					<X>310</X><Y>70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[myDatabase]]></Name>
						<Type><![CDATA[Database]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[modeFullNetherlands]]></Name>
						<Type><![CDATA[boolean]]></Type>
					</Parameter>
					<Body><![CDATA[// Create the query
String query = "";
if(modeFullNetherlands){
	query = "SELECT * FROM households WHERE gebruiksdoelen = 'woonfunctie'";
}
else {
	query = String.format("SELECT * FROM households WHERE gebruiksdoelen = 'woonfunctie' AND provincienaam = '%s'", p_province);
}
//traceln(query);

// Execute the query
ResultSet rs = myDatabase.getResultSet( query );
traceln("Resultset created, starting household creation");

if (!rs.isBeforeFirst()) {
    System.out.println("No data found for the query");
} else {
	while( rs.next() ) {
		f_createHouseholds(rs);
	}
}


rs.close();
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1737025224542</Id>
					<Name><![CDATA[f_linkNeighborhoodsToHouseholds]]></Name>
					<X>310</X><Y>110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[// Link households to neighborhoods
for (GZ_Neighborhood neighborhood : pop_GZ_Neighborhoods) {
    String buurtcode = neighborhood.p_neighborhoodCode;
	neighborhood.c_households.addAll(c_buurtcodeToHouseholds.get(buurtcode));
    
    if (neighborhood.c_households != null) {
        for (J_Household household : neighborhood.c_households) {
            neighborhood.f_initializeHousehold(household);  // Link household to neighborhood
        }
    }
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1737026465057</Id>
					<Name><![CDATA[f_selectNeighborhoods]]></Name>
					<X>300</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[// CREATE AAGENTS FROM NEIGHBORHOOD CBS DATA
double timer = System.currentTimeMillis();
List<Tuple> rows = selectFrom(neighborhood_shape)
    .list();


for (Tuple row : rows) {
	//If not full netherlands mode, check if municiaplities match with default test province
	if( p_modeFullNetherlands == false){
		String[] municipalityCodes = f_setMunicipalityCodes(p_province);
		boolean municipalityInRegion = java.util.Arrays.asList(municipalityCodes).contains(row.get(neighborhood_shape.gemeenteco));
		if(municipalityInRegion){
			f_createNeighborhood(row);
		}
	}
	else{
		//Else just create all neighborhoods
		f_createNeighborhood(row);
	}
}


//traceln(roundToDecimal((System.currentTimeMillis() - timer)/1000,3) + " seconds to get neighborhood data");]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1737026465059</Id>
					<Name><![CDATA[f_createNeighborhood]]></Name>
					<X>310</X><Y>-60</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[row]]></Name>
						<Type><![CDATA[Tuple]]></Type>
					</Parameter>
					<Body><![CDATA[GZ_Neighborhood x;
x = add_pop_GZ_Neighborhoods();
x.p_neighborhoodCode = row.get( neighborhood_shape.buurtcode);
x.p_neighborhood = row.get( neighborhood_shape.buurtnaam);

/*
x.p_municipalityCode = row.get( neighborhoods_netherlands.gm_code);
x.p_geometeryCoordinates = row.get( neighborhoods_netherlands.wkt_geom);
	
//Set neighborhood code
String replaced = "WK" + x.p_neighborhoodCode.substring(2);
x.p_districtCode = replaced.substring(0, replaced.length()-2);
		
//SET LOCATION
x.p_longitude = row.get( neighborhoods_netherlands.longitude);
x.p_latitude = row.get( neighborhoods_netherlands.latitude);	
x.setLatLon(x.p_latitude, x.p_longitude);
			
//SET COORDINATES AND REGION FROM WKT_GEOM STRING
//x.f_drawRegionFromWKTString();
*/]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[String[]]]></ReturnType>
					<Id>1737026669618</Id>
					<Name><![CDATA[f_setMunicipalityCodes]]></Name>
					<X>310</X><Y>-80</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[province]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[String[] municipalityCodes = { "initializeString" };

if(province.equals("Limburg")){
	//Municipality codes Limburg
	municipalityCodes = new String[] {
		"GM0882", "GM0888", "GM0889", "GM0893", "GM0899", 
		"GM0907", "GM0917", "GM0928", "GM0935", "GM0938", 
		"GM0944", "GM0946", "GM0957", "GM0965", "GM0971", 
		"GM0981", "GM0983", "GM0984", "GM0986", "GM0988", 
		"GM0994", "GM1507", "GM1640", "GM1641", "GM1669", 
		"GM1711", "GM1729", "GM1883", "GM1894", "GM1903", 
		"GM1954"
	};
}
else if(province.equals("Groningen")){
	municipalityCodes = new String[] {
    	"GM0014", "GM0037", "GM0047", "GM0765", "GM1895", 
    	"GM1950", "GM1952", "GM1966", "GM1969", "GM1979"
	};
}

return municipalityCodes;]]></Body>
				</Function>
			</Functions>
			<Connectivity>
				<Database>
					<Id>1734087040814</Id>
					<Name><![CDATA[db_households]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>50</X><Y>150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<DatabaseType>OTHER</DatabaseType>
					<ConnectionURL><![CDATA[jdbc:sqlite:household_data.db]]></ConnectionURL>
					<ConnectOnStartup>false</ConnectOnStartup>
					<DatabaseName><![CDATA[]]></DatabaseName>
					<Host><![CDATA[localhost]]></Host>
					<JdbcDriverClassName><![CDATA[net.sourceforge.jtds.jdbc.Driver]]></JdbcDriverClassName>
					<Login><![CDATA[]]></Login>
					<Password><![CDATA[]]></Password>
				</Database>
				<Database>
					<Id>1737012166055</Id>
					<Name><![CDATA[db_householdData]]></Name>
					<X>100</X><Y>450</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<DatabaseType>OTHER</DatabaseType>
					<ConnectionURL><![CDATA[jdbc:sqlite:large_files/households.db]]></ConnectionURL>
					<ConnectOnStartup>true</ConnectOnStartup>
					<DatabaseName><![CDATA[]]></DatabaseName>
					<Host><![CDATA[localhost]]></Host>
					<JdbcDriverClassName><![CDATA[net.sourceforge.jtds.jdbc.Driver]]></JdbcDriverClassName>
					<Login><![CDATA[]]></Login>
					<Password><![CDATA[]]></Password>
				</Database>
			</Connectivity>
			<AgentLinks>
				<AgentLink>
					<Id>1734080351670</Id>
					<Name><![CDATA[connections]]></Name>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<EmbeddedObjects>
				<EmbeddedObject>
					<Id>1737030482664</Id>
					<Name><![CDATA[pop_GZ_Neighborhoods]]></Name>
					<X>300</X><Y>-130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<PresentationId>1737030482666</PresentationId>
					<ActiveObjectClass>
						<PackageName><![CDATA[household_data_loader]]></PackageName>
						<ClassName><![CDATA[GZ_Neighborhood]]></ClassName>
					</ActiveObjectClass>
					<GenericParameterSubstitute>
						<GenericParameterSubstituteReference>
							<PackageName><![CDATA[household_data_loader]]></PackageName>
							<ClassName><![CDATA[GZ_Neighborhood]]></ClassName>
							<ItemName><![CDATA[1737025300384]]></ItemName>
						</GenericParameterSubstituteReference>
					</GenericParameterSubstitute>
					<Parameters>
						<Parameter>
							<Name><![CDATA[p_neighborhoodCode]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_neighborhood]]></Name>
						</Parameter>
					</Parameters>
					<ReplicationFlag>true</ReplicationFlag>
					<Replication Class="CodeValue">
						<Code><![CDATA[100]]></Code>
					</Replication>
					<CollectionType>ARRAY_LIST_BASED</CollectionType>
					<InEnvironment>true</InEnvironment>	
					<InitialLocationType>XYZ</InitialLocationType>
					<ColumnCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ColumnCode>
					<RowCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</RowCode>
					<LocationNameCode Class="CodeValue">
						<Code><![CDATA[""]]></Code>
					</LocationNameCode>
					<InitializationType>EMPTY</InitializationType>
					<InitializationDatabaseTableQuery>
						<TableReference>
						</TableReference>
					</InitializationDatabaseTableQuery>
					<InitializationDatabaseType>ONE_AGENT_PER_DATABASE_RECORD</InitializationDatabaseType>
					<QuantityColumn>
					</QuantityColumn>
				</EmbeddedObject>
			</EmbeddedObjects>

			<Presentation>
				<Level>
					<Id>1734080351676</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>DIM_NON_CURRENT</LevelVisibility>


				</Level>
				<EmbeddedObjectPresentation>
					<Id>1737030482666</Id>
					<Name><![CDATA[pop_GZ_Neighborhoods_presentation]]></Name>
					<X>400</X><Y>-130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<ScaleType>AUTOMATICALLY_CALCULATED</ScaleType>
					<GISScaleForRealEmbeddedObjectPresentationSize>1000</GISScaleForRealEmbeddedObjectPresentationSize>
					<GISScaleForFixedEmbeddedObjectPresentationSize>1000000000</GISScaleForFixedEmbeddedObjectPresentationSize>
					<Latitude>0.0</Latitude>
					<Longitude>0.0</Longitude>
				</EmbeddedObjectPresentation>
			</Presentation>

		</ActiveObjectClass>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1737025300378</Id>
			<Name><![CDATA[GZ_Neighborhood]]></Name>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1737025300384</Id>
				<Name><![CDATA[1737025300384]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T extends Agent]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Generic parameter:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>CONTINUOUS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<NetworkType>USER_DEF</NetworkType>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1737100800000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1737025300381</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1737025300385</CurrentLevel>
			<ConnectionsId>1737025300379</ConnectionsId>
			<Variables>
				<Variable Class="Parameter">
					<Id>1737025485967</Id>
					<Name><![CDATA[p_neighborhoodCode]]></Name>
					<X>50</X><Y>90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1737025485965</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1737025485970</Id>
					<Name><![CDATA[p_neighborhood]]></Name>
					<X>50</X><Y>70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1737025485968</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="CollectionVariable">
					<Id>1737025471310</Id>
					<Name><![CDATA[c_households]]></Name>
					<X>50</X><Y>150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" AccessType="public" StaticVariable="false">
						<CollectionClass><![CDATA[ArrayList]]></CollectionClass>
						<ElementClass><![CDATA[J_Household]]></ElementClass>
						<ValueElementClass><![CDATA[String]]></ValueElementClass>
					</Properties>

				</Variable>
			</Variables>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1737025651132</Id>
					<Name><![CDATA[f_initializeHousehold]]></Name>
					<X>50</X><Y>175</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[household]]></Name>
						<Type><![CDATA[J_Household]]></Type>
					</Parameter>
					<Body><![CDATA[household.setNeighborhood(this);]]></Body>
				</Function>
			</Functions>
			<AgentLinks>
				<AgentLink>
					<Id>1737025300379</Id>
					<Name><![CDATA[connections]]></Name>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<ContainerLinks>
				<ContainerLink>
					<Id>1737030482676</Id>
					<Name><![CDATA[main]]></Name>
					<X>50</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[household_data_loader]]></PackageName>
						<ClassName><![CDATA[Main]]></ClassName>
					</ActiveObjectClass>
				</ContainerLink>
			</ContainerLinks>

			<Presentation>
				<Level>
					<Id>1737025300385</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>DIM_NON_CURRENT</LevelVisibility>

			<Presentation>
				<Text>
					<Id>1737025485962</Id>
					<Name><![CDATA[Btext]]></Name>
					<X>100</X><Y>35</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Buurt beschrijving]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>1</Style>
					</Font>
					<Alignment>CENTER</Alignment>
				</Text>
			</Presentation>

				</Level>
			</Presentation>

		</ActiveObjectClass>
	</ActiveObjectClasses>
	<DifferentialEquationsMethod>EULER</DifferentialEquationsMethod>
	<MixedEquationsMethod>RK45_NEWTON</MixedEquationsMethod>
	<AlgebraicEquationsMethod>MODIFIED_NEWTON</AlgebraicEquationsMethod>
	<AbsoluteAccuracy>1.0E-5</AbsoluteAccuracy>
	<FixedTimeStep>0.001</FixedTimeStep>
	<RelativeAccuracy>1.0E-5</RelativeAccuracy>
	<TimeAccuracy>1.0E-5</TimeAccuracy>
	<Frame>
		<Width>1000</Width>
		<Height>600</Height>
	</Frame>
	<Database>
		<Logging>false</Logging>
		<AutoExport>false</AutoExport>
		<ShutdownCompact>false</ShutdownCompact>
		<ImportSettings>
			<ExternalConnection>
				<Id>1737061645590</Id>
				<Name><![CDATA[database]]></Name>
				<X>0</X><Y>0</Y>
				<Label><X>10</X><Y>0</Y></Label>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>true</PresentationFlag>
				<ShowLabel>true</ShowLabel>
				<DatabaseType>EXCEL_ACCESS</DatabaseType>
				<ConnectionURL><![CDATA[]]></ConnectionURL>
				<ConnectOnStartup>true</ConnectOnStartup>
				<DatabaseName><![CDATA[]]></DatabaseName>
				<ResourceReference>
					<PackageName><![CDATA[household_data_loader]]></PackageName>
					<ClassName><![CDATA[C:/Users/s124129/Documents/GitHub/Heat_transition_tipping_pathways/Heat transition tipping pathways/_neighborhood_shapes_2023.xlsx]]></ClassName>
				</ResourceReference>
				<Host><![CDATA[localhost]]></Host>
				<JdbcDriverClassName><![CDATA[net.sourceforge.jtds.jdbc.Driver]]></JdbcDriverClassName>
				<Login><![CDATA[]]></Login>
				<Password><![CDATA[]]></Password>
			</ExternalConnection>
			<ExternalConnection>
				<Id>1737026498391</Id>
				<Name><![CDATA[database]]></Name>
				<X>0</X><Y>0</Y>
				<Label><X>10</X><Y>0</Y></Label>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>true</PresentationFlag>
				<ShowLabel>true</ShowLabel>
				<DatabaseType>EXCEL_ACCESS</DatabaseType>
				<ConnectionURL><![CDATA[]]></ConnectionURL>
				<ConnectOnStartup>true</ConnectOnStartup>
				<DatabaseName><![CDATA[]]></DatabaseName>
				<ResourceReference>
					<PackageName><![CDATA[household_data_loader]]></PackageName>
					<ClassName><![CDATA[C:/Users/s124129/Documents/GitHub/Heat_transition_tipping_pathways/Heat transition tipping pathways/_neighborhoods_netherlands.xlsx]]></ClassName>
				</ResourceReference>
				<Host><![CDATA[localhost]]></Host>
				<JdbcDriverClassName><![CDATA[net.sourceforge.jtds.jdbc.Driver]]></JdbcDriverClassName>
				<Login><![CDATA[]]></Login>
				<Password><![CDATA[]]></Password>
			</ExternalConnection>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[household_data_loader]]></PackageName>
					<ClassName><![CDATA[neighborhood_shape]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["neighborhood_shape"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[household_data_loader]]></PackageName>
					<ClassName><![CDATA[neighborhoods_netherlands]]></ClassName>
				</TableReference>
				<ConnectionIndex>1</ConnectionIndex>
				<ExternalTableName><![CDATA["neighborhoods_netherlands"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
		</ImportSettings>
		<ExportSettings>
		</ExportSettings>
	</Database>

	<RunConfiguration ActiveObjectClassId="1734080351669">
		<Id>1734080351695</Id>
		<Name><![CDATA[RunConfiguration]]></Name>
		<MaximumMemory>512</MaximumMemory>
		<ModelTimeProperties>
			<StopOption><![CDATA[Stop at specified time]]></StopOption>
			<InitialDate><![CDATA[1734048000000]]></InitialDate>	
			<InitialTime><![CDATA[0.0]]></InitialTime>	
			<FinalDate><![CDATA[1736726400000]]></FinalDate>	
			<FinalTime><![CDATA[100.0]]></FinalTime>	
		</ModelTimeProperties>
		<AnimationProperties>
			<StopNever>true</StopNever>
			<ExecutionMode>realTimeScaled</ExecutionMode>
			<RealTimeScale>1.0</RealTimeScale>
			<EnableZoomAndPanning>true</EnableZoomAndPanning>
			<EnableDeveloperPanel>false</EnableDeveloperPanel>
			<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
		</AnimationProperties>
		<Inputs>		
		</Inputs>
		<Outputs>
		</Outputs>
	</RunConfiguration>
	<Experiments>	
		<!--   =========   Simulation Experiment   ========  -->
		<SimulationExperiment ActiveObjectClassId="1734080351669">
			<Id>1734080351692</Id>
			<Name><![CDATA[Simulation]]></Name>
			<CommandLineArguments><![CDATA[]]></CommandLineArguments>
			<MaximumMemory>16384</MaximumMemory>
			<RandomNumberGenerationType>fixedSeed</RandomNumberGenerationType>
			<CustomGeneratorCode>new Random()</CustomGeneratorCode>
			<SeedValue>1</SeedValue>
			<SelectionModeForSimultaneousEvents>LIFO</SelectionModeForSimultaneousEvents>
			<VmArgs><![CDATA[]]></VmArgs>
			<LoadRootFromSnapshot>false</LoadRootFromSnapshot>

			<Presentation>
				<Text>
					<Id>1734080351694</Id>
					<Name><![CDATA[text]]></Name>
					<X>50</X><Y>30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[household_data_loader]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>24</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
			</Presentation>

			<Parameters>			
				<Parameter>
					<ParameterName><![CDATA[p_modeFullNetherlands]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[p_province]]></ParameterName>
				</Parameter>
			</Parameters>			
			<PresentationProperties>
				<EnableZoomAndPanning>true</EnableZoomAndPanning>
				<ExecutionMode><![CDATA[realTimeScaled]]></ExecutionMode>
				<Title><![CDATA[household_data_loader : Simulation]]></Title>	
				<EnableDeveloperPanel>true</EnableDeveloperPanel>
				<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
				<RealTimeScale>1.0</RealTimeScale>
			</PresentationProperties>
			<ModelTimeProperties>
				<StopOption><![CDATA[Never]]></StopOption>
				<InitialDate><![CDATA[1734048000000]]></InitialDate>	
				<InitialTime><![CDATA[0.0]]></InitialTime>	
				<FinalDate><![CDATA[1736726400000]]></FinalDate>	
				<FinalTime><![CDATA[100.0]]></FinalTime>	
			</ModelTimeProperties>
			<BypassInitialScreen>true</BypassInitialScreen>
		</SimulationExperiment>	
	</Experiments>
	<JavaClasses>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1734080383030</Id>
			<Name><![CDATA[J_APIDownloader]]></Name>
			<ExcludeFromBuild>true</ExcludeFromBuild>
			<Text><![CDATA[/**
 * J_APIDownloader
 */	
import okhttp3.*;
import java.io.FileWriter;
import java.io.IOException;


public class J_APIDownloader {
    private static final OkHttpClient client = new OkHttpClient();

    public static void main(String[] args) throws IOException {
        for (String neighborhoodId : getNeighborhoodIds()) {
            String apiUrl = "https://example.com/api/neighborhood?id=" + neighborhoodId;
            String response = fetchFromAPI(apiUrl);
            saveToFile(neighborhoodId, response); // Save as a JSON file
        }
    }

    private static String fetchFromAPI(String apiUrl) throws IOException {
        Request request = new Request.Builder().url(apiUrl).build();
        try (Response response = client.newCall(request).execute()) {
            if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
            return response.body().string();
        }
    }

    private static void saveToFile(String neighborhoodId, String data) throws IOException {
        try (FileWriter fileWriter = new FileWriter("data/neighborhood_" + neighborhoodId + ".json")) {
            fileWriter.write(data);
        }
    }

    private static String[] getNeighborhoodIds() {
        return new String[]{"1", "2", "3"}; // Replace with dynamic IDs
    }

	@Override
	public String toString() {
		return super.toString();
	}

}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1734080614209</Id>
			<Name><![CDATA[J_APIConnection]]></Name>
			<Text><![CDATA[/**
 * J_APIConnection
 */	

import java.net.HttpURLConnection;
import java.net.URL;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.FileWriter;
import org.json.JSONObject; // for JSON parsing
import org.json.JSONArray;
import java.util.ArrayList;
import java.util.List;

public class J_APIConnection  {

    /**
     * Default constructor
     */
    public J_APIConnection(String[] neighborhoodCodes) {
    	
    	//Generate households based on included neighborhoods
    	for (String neighborhoodID : neighborhoodCodes) {	
    		try {
    			// Build the URL with the comma-separated gemeentecodes
    			//String baseUrl = "https://ds.vboenergie.commondatafactory.nl/list/?match-gemeentecode=";
    		    //String url = baseUrl + gemeentecode;
    		    String baseUrl = "https://ds.vboenergie.commondatafactory.nl/list/?match-buurtcode=";
    		    String url = baseUrl + neighborhoodID;
    			//traceln(url);
    		   
    		   // Create an HttpURLConnection and set the request method
    			HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
    			connection.setRequestMethod("GET");

    			// Get the response code
    			int responseCode = connection.getResponseCode();

    			if (responseCode == HttpURLConnection.HTTP_OK) {
    				// Read the response data
    				BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
    				String inputLine;
    				StringBuilder response = new StringBuilder();

    				while ((inputLine = in.readLine()) != null) {
    					response.append(inputLine);
    				}
    				in.close();

    				// Process the response data as needed
    				//String responseData = response.toString();
    				//System.out.println("API Response for buurtcode " + x.p_neighborhoodCode + ":\n" + response.toString());

    				// Parse the response (e.g., as JSON)
    				saveToFile(neighborhoodID, response.toString());
    		        JSONArray jsonArray = new JSONArray(response.toString()); // Use JSONArray for JSON data
    		        //traceln(jsonArray);
    		        
    		        // Loop through the JSON array and create agents
    				for (int i = 0; i < jsonArray.length(); i++) {
    		    		JSONObject jsonObject = jsonArray.getJSONObject(i);
    					
    					//Make households just for gebruiksdoel woonfuctie				
    					if(jsonObject.getString("gebruiksdoelen").contains("woonfunctie")){
    			   			// Create agents and set their properties based on JSON data
    						//f_getHouseholds(jsonObject, x);
    					}
    					//for industry
    					/*
    					else if (jsonObject.getString("gebruiksdoelen").contains("industriefunctie")){
    						f_getIndustrySites(jsonObject, x);
    					}
    					else {
    						f_getUtilityObjects(jsonObject, x);
    					}*/			
    				}
    				
    			} 
    			else {
    				System.out.println("API request for buurtcode " + neighborhoodID + " failed with status code: " + responseCode);
    			}
    		} catch (Exception e) {
    		    e.printStackTrace();
    		}
    	}  	
    }

    //Save to file
    private static void saveToFile(String neighborhoodId, String data) throws IOException {
        try (FileWriter fileWriter = new FileWriter("C:\\Users\\s124129\\Documents\\GitHub\\Heat_transition_tipping_pathways\\household_data_loader\\neighborhood_" + neighborhoodId + ".json")) {
        //	File file = new File("data/neighborhood_BU00900013.json");
            fileWriter.write(data);
        }
    }
    
	@Override
	public String toString() {
		return super.toString();
	}
}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1734082775598</Id>
			<Name><![CDATA[J_JSONToDatabase]]></Name>
			<ExcludeFromBuild>true</ExcludeFromBuild>
			<Text><![CDATA[/**
 * J_JSONToDatabase
 */	

/*
import com.fasterxml.jackson.databind.*;
import java.sql.*;
import java.io.File;
*/
public class J_JSONToDatabase {
	
	public J_JSONToDatabase() {
		private static final ObjectMapper objectMapper = new ObjectMapper();
		private static final String DB_URL = "jdbc:sqlite:households.db";

	    public static void main(String[] args) throws Exception {
	        try (Connection conn = DriverManager.getConnection(DB_URL)) {
	            createTable(conn);
	            for (File file : new File("data").listFiles()) {
	                insertDataFromJSON(conn, file);
	            }
	        }
	    }

    private static void createTable(Connection conn) throws SQLException {
        String createTableSQL = "CREATE TABLE IF NOT EXISTS households (" +
                                "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                                "neighborhood_id INT, " +
                                "attribute1 TEXT, " +
                                "attribute2 TEXT, " +
                                "attribute15 TEXT)";
        conn.createStatement().execute(createTableSQL);
    }

    private static void insertDataFromJSON(Connection conn, File file) throws Exception {
        int neighborhoodId = extractNeighborhoodId(file.getName()); // Custom logic for ID extraction
        J_Household[] households = objectMapper.readValue(file, J_Household[].class);
        String insertSQL = "INSERT INTO households (neighborhood_id, attribute1, attribute2, attribute15) VALUES (?, ?, ?, ?)";

        try (PreparedStatement stmt = conn.prepareStatement(insertSQL)) {
            for (J_Household household : households) {
                stmt.setInt(1, neighborhoodId);
                stmt.setString(2, household.getAttribute1());
                stmt.setString(3, household.getAttribute2());
                stmt.setString(4, household.getAttribute15());
                stmt.addBatch();
            }
            stmt.executeBatch();
        }
    }

    private static int extractNeighborhoodId(String fileName) {
        return Integer.parseInt(fileName.replace("neighborhood_", "").replace(".json", ""));
    }
}


	@Override
	public String toString() {
		return super.toString();
	}
}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1734092951959</Id>
			<Name><![CDATA[J_Household]]></Name>
			<Text><![CDATA[/**
 * J_Household
 */	
public class J_Household {
	
	private int numid;
	private int pid;
	private int vid;
	private int oppervlakte;
	private int woningequivalent;
	private int pand_bouwjaar;
	private String energieklasse;
	private String neighborhoodCode;
	private GZ_Neighborhood neighborhood;
	
    /**
     * Default constructor
     */
    public J_Household(int numid, int pid, int vid, int oppervlakte, int woningequivaltent, int pand_bouwjaar, String energieklasse, String neighborhoodCode) {
    	this.numid = numid;
    	this.pid = pid;
    	this.vid = vid;
    	this.oppervlakte = oppervlakte;
    	this.woningequivalent = woningequivaltent;
    	this.pand_bouwjaar = pand_bouwjaar;
    	this.energieklasse = energieklasse;
    	this.neighborhoodCode = neighborhoodCode;
    }

    
    
    /**
     * Setters
     */
    
    public void setNumid(int numid) {
    	this.numid = numid;
    }
    
    public void setPid(int pid) {
    	this.numid = pid;
    }
        
    public void setEnergieklasse(String energieklasse ) {
    	this.energieklasse = energieklasse;
    }
    
    public void setNeighborhood(GZ_Neighborhood neighborhood) {
    	this.neighborhood = neighborhood;
    }
    
	@Override
	public String toString() {
		return super.toString();
	}

}



















]]></Text>
		</JavaClass>
	</JavaClasses>
	<ModelResources>
		<Resource>
			<Path><![CDATA[json-20230618.jar]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
			<Location>FILE_SYSTEM</Location>
		</Resource>
		<Resource>
			<Path><![CDATA[sqlite-jdbc-3.47.1.0.jar]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
			<Location>FILE_SYSTEM</Location>
		</Resource>
		<Resource>
			<Path><![CDATA[C:/Users/s124129/Documents/GitHub/Heat_transition_tipping_pathways/Heat transition tipping pathways/_neighborhoods_netherlands.xlsx]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
			<Location>FILE_SYSTEM</Location>
		</Resource>
		<Resource>
			<Path><![CDATA[C:/Users/s124129/Documents/GitHub/Heat_transition_tipping_pathways/Heat transition tipping pathways/_neighborhood_shapes_2023.xlsx]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
			<Location>FILE_SYSTEM</Location>
		</Resource>
	</ModelResources>
    <RequiredLibraryReference>
		<LibraryName><![CDATA[com.anylogic.libraries.modules.markup_descriptors]]></LibraryName>
		<VersionMajor>1</VersionMajor>
		<VersionMinor>0</VersionMinor>
		<VersionBuild>0</VersionBuild>
    </RequiredLibraryReference>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[household_data_loader]]></PackageName>
			<ClassName><![CDATA[json-20230618.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[household_data_loader]]></PackageName>
			<ClassName><![CDATA[sqlite-jdbc-3.47.1.0.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
</Model>
</AnyLogicWorkspace>